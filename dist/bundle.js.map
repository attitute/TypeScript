{"version":3,"file":"bundle.js","sources":["../src/index.ts"],"sourcesContent":["\r\n// 接口  描述对象的形状 根据接口提供一些新的类供别人使用\r\n\r\n// 计算fullname = firstName + lastName\r\n\r\n// type obje = {\r\n//   firstName:string,\r\n//   lastName:string\r\n// }\r\n\r\n// 接口与type得区别：\r\n// 接口可以被实现 被继承 type不能\r\n// type可以写联合类型\r\n\r\n// 能用接口就用接口 不能用就用type\r\n\r\n// 1.描述对象\r\ninterface IFullName {\r\n  firstName: string,\r\n  lastName: string\r\n}\r\n\r\nconst fullName = (obj:IFullName) => {\r\n  return obj.firstName + obj.lastName\r\n}\r\nfullName({firstName: 'ja', lastName:'ck'})\r\n\r\n// 2.描述函数\r\ntype xx = (firtName:string, lastName:string)=>string\r\nconst funllName1:xx = (firtName, lastName) => {\r\n  return firtName+lastName\r\n}\r\ninterface IFullName1 {\r\n  (firtName:string, lastName:string):string\r\n}\r\nconst funllName2:IFullName1 = (firtName, lastName) => {\r\n  return firtName+lastName\r\n}\r\n\r\n// 混合类型 计数器 一个函数返回一个函数，返回的函数有属性\r\n// interface ICount {\r\n//     count:number,\r\n//     ():number,\r\n\r\n// }\r\n// const fn:ICount = () => {\r\n//     return ++fn.count\r\n// }\r\n// fn.count = 0\r\n// console.log(fn())\r\n// console.log(fn())\r\n\r\n// 接口特性\r\ninterface IVegetables {\r\n  taste: string,\r\n  color: string,\r\n}\r\n\r\n// 1. 如果定义值比接口多 可以断言\r\nconst tomato:IVegetables = {\r\n  size: 1,\r\n  taste: 'sour',\r\n  color: 'red'\r\n} as IVegetables\r\n\r\n// 2. 多个同名接口可以合并 但是会破坏原接口\r\ninterface IVegetables {\r\n  size:number\r\n}\r\n\r\nconst tomato1:IVegetables = {\r\n  size: 1,\r\n  taste: 'sour',\r\n  color: 'red'\r\n}\r\n\r\n// 3.可以继承 并且不会破坏原接口\r\ninterface Itomato extends IVegetables {\r\n  size: number\r\n}\r\n\r\nconst tomato2:Itomato = {\r\n  size: 1,\r\n  taste: 'sour',\r\n  color: 'red'\r\n}\r\n\r\n// 4. 需要多个不确定属性时\r\ninterface IVegetables1 { // 可选属性 可设置仅读属性\r\n  taste: string, // 必填\r\n  size?: number, // 可以不填\r\n  readonly [xxx:string]:any // 随意 只要key是string 值随意\r\n}\r\nconst tomato3:IVegetables1 = {\r\n  // size: 1,\r\n  1:1,\r\n  taste: 'sour',\r\n  color: 'red'\r\n}\r\n// tomato3.color = 'green' // 错误示范 仅读属性\r\n// console.log(tomato3.color)\r\n\r\n// 接口可以索引数组下标\r\ninterface IArr {\r\n  [key:number]:any\r\n}\r\nlet arr:IArr = [1,{},'a']\r\n\r\n\r\n// ----------------------------------\r\n// 接口可以被类来实现\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport {}"],"names":[],"mappings":";;;EACA;EAqBA,IAAM,QAAQ,GAAG,UAAC,GAAa;MAC7B,OAAO,GAAG,CAAC,SAAS,GAAG,GAAG,CAAC,QAAQ,CAAA;EACrC,CAAC,CAAA;EACD,QAAQ,CAAC,EAAC,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAC,IAAI,EAAC,CAAC;;;;;;"}